{:deps {amiorin/big-config {:local/root "."}}
 :tasks
 {:requires ([rama-jdbc :as rama-jdbc]
             [clojure.string :as str])
  :init (defn run-steps [first-step]
              (-> [first-step]
                  (into *command-line-args*)
                  (->> (str/join " "))
                  (rama-jdbc/run-steps {:big-config/env :shell})))
  help {:doc "the workflow help"
        :override-builtin true
        :task (println "Usage: bb <step|cmd>+ -- <module> <profile> [global-args]

The available steps are listed below. Anything that is not a step is considered
a cmd where `:` is replaced with ` `

Steps
  render          use `big-config` to generate the configuration files
  exec            you can either multiple cmds or a single exec where the cmd
                  will be provided in the global-args

These two are equivalent
  bb exec -- alpha prod ansible-playbook main.yml
  bb ansible-playbook:main.yml -- alpha prod

These two are also equivalent
  bb tofu:apply tofu:destroy -- alpha prod -auto-approve
  bb tofu:apply:-auto-approve tofu:destroy:-auto-approve -- alpha prod

Example of cmds:
  tofu:init                    tofu init
  tofu:plan                    tofu plan
  tofu:apply:-auto-approve     tofu apply -auto-approve
  ansible-playbook:main.yml    ansible-playbook main.yml
")}
  render {:doc "render the dist folder"
          :task (run-steps "render")}
  exec {:doc "exec in the target directory"
        :task (run-steps "exec")}
  -tidy {:doc "tidy clojure files"
         :task (do (shell "clojure-lsp clean-ns")
                   (shell "clojure-lsp format"))}}}
